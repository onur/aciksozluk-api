'use strict';

var crypto = require('crypto');
var env    = process.env.NODE_ENV || 'development';


// salt generation for hashing functions
// FIXME: secret key will be required in express application (for signed cookies),
//        and currently, it's only available in this module
var secret;

// salt is a simple value if we are using development environment
if (env === 'development') {
    secret = process.env.SECRET_KEY || 'aciksozluk';
} else if (env === 'test') {
    // use random generated bytes for testing environment
    secret = crypto.randomBytes(16).toString('hex');
} else {
    // secret key must be supplied as an environment variable for production environment
    // TODO: Need to document this
    secret = process.env.SECRET_KEY;
    if (!secret) {
        console.log('SECRET_KEY is not available!');
        process.exit(100);
    }
}



module.exports = function(sequelize, DataTypes) {
    return sequelize.define('User', {
        username: {
            type: DataTypes.STRING(50),
            allowNull: false,
            validate: {
                isAlphanumeric: true
            },
            unique: true
        },
        email: {
            type: DataTypes.STRING(100),
            allowNull: false,
            validate: {
                isEmail: true
            },
            unique: true
        },
        gender: {
            type: DataTypes.ENUM,
            values: ['male', 'female']
        },
        birthDate: {
            type: DataTypes.DATEONLY,
            validate: {
                isDate: true,
                isAfter: '1900-01-01'
            }
        },
        passwordHash: {
            type: DataTypes.STRING(1024),
            allowNull: false
        },
        password: {
            type: DataTypes.VIRTUAL,
            allowNull: false,
            validate: {
                isLongEnough: function(val) {
                    if (val.length < 6) {
                        throw new Error('Choose longer password');
                    }
                }
            },
            set: function(plainText) {
                var hash = crypto.pbkdf2Sync(plainText, secret, 10000, 512, 'sha512');
                this.setDataValue('password', plainText);
                this.setDataValue('passwordHash', hash.toString('hex'));
            }
        },
        lastLoginDate: {
            type: DataTypes.DATE, //timestamps
            validate: {
                isDate: true
            }
        }
    }, {
        timestamps: true,
        paranoid: true,
        freezeTableName: true,
        instanceMethods: {
            comparePassword: function(plainTextPassword) {
                return this.passwordHash === crypto.pbkdf2Sync(plainTextPassword,
                        secret, 10000, 512, 'sha512').toString('hex');
            }
        }
    });
};
